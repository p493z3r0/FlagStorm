// <auto-generated />
using System;
using System.Collections.Generic;
using FlagStorm.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlagStorm.Data.Migrations
{
    [DbContext(typeof(FlagStormDbContext))]
    [Migration("20250629183418_UpdateEntities")]
    partial class UpdateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountIdEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("AccountIds");
                });

            modelBuilder.Entity("AppVersionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppVersionEntity");
                });

            modelBuilder.Entity("BrowserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("Browsers");
                });

            modelBuilder.Entity("DeviceTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("EnvironmentNameEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.AppVersionRangeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleId")
                        .HasColumnType("text");

                    b.Property<string>("MaxId")
                        .HasColumnType("text");

                    b.Property<string>("MinId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleId")
                        .IsUnique();

                    b.HasIndex("MaxId");

                    b.HasIndex("MinId");

                    b.ToTable("VersionRanges");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormFeatureEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<IReadOnlySet<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormFeatureRuntimeConfigEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormFeatureId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RunPercentage")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormFeatureId")
                        .IsUnique();

                    b.ToTable("RuntimeConfigs");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAllowRule")
                        .HasColumnType("boolean");

                    b.Property<string>("RuntimeConfigId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RuntimeConfigId");

                    b.ToTable("TargetRules");
                });

            modelBuilder.Entity("LocaleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("Locales");
                });

            modelBuilder.Entity("OperatingSystemEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("RegionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlagStormTargetRuleEntityId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlagStormTargetRuleEntityId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AccountIdEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("AccountIds")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("BrowserEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("Browsers")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("DeviceTypeEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("DeviceTypes")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("EnvironmentNameEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("Environments")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.AppVersionRangeEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithOne("AppVersionRange")
                        .HasForeignKey("FlagStorm.Data.Persistence.Entities.AppVersionRangeEntity", "FlagStormTargetRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppVersionEntity", "Max")
                        .WithMany()
                        .HasForeignKey("MaxId");

                    b.HasOne("AppVersionEntity", "Min")
                        .WithMany()
                        .HasForeignKey("MinId");

                    b.Navigation("Max");

                    b.Navigation("Min");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormFeatureRuntimeConfigEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormFeatureEntity", null)
                        .WithOne("RuntimeConfig")
                        .HasForeignKey("FlagStorm.Data.Persistence.Entities.FlagStormFeatureRuntimeConfigEntity", "FlagStormFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormFeatureRuntimeConfigEntity", null)
                        .WithMany("TargetRules")
                        .HasForeignKey("RuntimeConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocaleEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("Locales")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("OperatingSystemEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("OperatingSystems")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("RegionEntity", b =>
                {
                    b.HasOne("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", null)
                        .WithMany("Regions")
                        .HasForeignKey("FlagStormTargetRuleEntityId");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormFeatureEntity", b =>
                {
                    b.Navigation("RuntimeConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormFeatureRuntimeConfigEntity", b =>
                {
                    b.Navigation("TargetRules");
                });

            modelBuilder.Entity("FlagStorm.Data.Persistence.Entities.FlagStormTargetRuleEntity", b =>
                {
                    b.Navigation("AccountIds");

                    b.Navigation("AppVersionRange");

                    b.Navigation("Browsers");

                    b.Navigation("DeviceTypes");

                    b.Navigation("Environments");

                    b.Navigation("Locales");

                    b.Navigation("OperatingSystems");

                    b.Navigation("Regions");
                });
#pragma warning restore 612, 618
        }
    }
}
